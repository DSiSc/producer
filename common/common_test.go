package common

import (
	"bytes"
	"github.com/DSiSc/craft/types"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
	"time"
)

var to = &types.Address{
	0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
	0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
}
var from = &types.Address{
	0x12, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
	0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
}

var data = []byte{
	0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
}

var emptyTx = &types.Transaction{

	Data: types.TxData{
		AccountNonce: 0,
		Price:        new(big.Int).SetUint64(10),
		GasLimit:     100,
		Recipient:    to,
		From:         from,
		Amount:       new(big.Int).SetUint64(50),
		Payload:      data,
	},
}

func TestTxHash(t *testing.T) {
	assert := assert.New(t)
	expect := types.Hash{
		0x4c, 0xb3, 0x5d, 0x9e, 0xfb, 0x35, 0xc3, 0x5d, 0xc0, 0x12, 0x90, 0x23, 0xb2, 0xe3, 0xb0, 0xc5, 0x61, 0x30, 0xf1, 0xd0, 0x58, 0xcb, 0xf5, 0x2e, 0x65, 0x4e, 0x75, 0x47, 0x21, 0x29, 0x33, 0x54,
	}
	hash := TxHash(emptyTx)
	assert.Equal(expect, hash)
	hash = TxHash(emptyTx)
	assert.Equal(expect, hash)
}

func TestSumSha256(t *testing.T) {
	b := []byte{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	c := Sum(b)
	except := []byte{
		0x8d, 0xb5, 0xc6, 0x54, 0xc7, 0xa1, 0x24, 0xd4, 0xf8, 0x6a, 0x6c, 0x19, 0xb6, 0x69, 0x51, 0x41, 0xbb, 0xc6, 0xa7, 0xaf, 0x7c, 0x7b, 0x89, 0x8a, 0x85, 0xaf, 0x71, 0xe, 0xf, 0x3, 0xbb, 0xc2,
	}
	assert.Equal(t, except, c)
}

func TestCopyBytes(t *testing.T) {
	b := []byte{
		0xb2, 0x6f, 0x2b, 0x34, 0x2a, 0xab, 0x24, 0xbc, 0xf6, 0x3e,
		0xa2, 0x18, 0xc6, 0xa9, 0x27, 0x4d, 0x30, 0xab, 0x9a, 0x15,
	}
	c := CopyBytes(b)
	assert.Equal(t, b, c)
}

var MockHash = types.Hash{
	0x1d, 0xcf, 0x7, 0xba, 0xfc, 0x42, 0xb0, 0x8d, 0xfd, 0x23, 0x9c, 0x45, 0xa4, 0xb9, 0x38, 0xd,
	0x8d, 0xfe, 0x5d, 0x6f, 0xa7, 0xdb, 0xd5, 0x50, 0xc9, 0x25, 0xb1, 0xb3, 0x4, 0xdc, 0xc5, 0x1c,
}

var MockBlockHash = types.Hash{
	0xaf, 0x4e, 0x5b, 0xa3, 0x16, 0x97, 0x74, 0x6a, 0x26, 0x9d, 0x9b, 0x9e, 0xf1, 0x9d, 0xa8, 0xb3,
	0xf9, 0x32, 0x68, 0x16, 0xf4, 0x73, 0xd4, 0xb3, 0x6a, 0xaf, 0x2d, 0x6d, 0xfa, 0x82, 0xd9, 0x89,
}

var MockHeaderHash = types.Hash{
	0xcc, 0x88, 0x1c, 0x28, 0x30, 0x38, 0x50, 0x46, 0x2c, 0xcb, 0xae, 0xe5, 0xa4, 0x88, 0x85, 0x75,
	0xdf, 0xae, 0xd7, 0xd3, 0x39, 0x17, 0x9a, 0xfc, 0x9c, 0x4, 0x5e, 0xcd, 0x98, 0x8a, 0x39, 0xdd,
}

func MockBlock() *types.Block {
	return &types.Block{
		Header: &types.Header{
			ChainID:       1,
			PrevBlockHash: MockHash,
			StateRoot:     MockHash,
			TxRoot:        MockHash,
			ReceiptsRoot:  MockHash,
			Height:        1,
			Timestamp:     uint64(time.Date(2018, time.August, 28, 0, 0, 0, 0, time.UTC).Unix()),
		},
		Transactions: make([]*types.Transaction, 0),
	}
}

func TestBlockHash(t *testing.T) {
	assert := assert.New(t)
	block := MockBlock()
	header := block.Header

	var tmp types.Hash
	assert.True(bytes.Equal(tmp[:], header.MixDigest[:]))
	assert.True(bytes.Equal(tmp[:], block.HeaderHash[:]))

	digest := HeaderDigest(header)
	exceptDigest := types.Hash{0xd8, 0xf9, 0xbb, 0xf4, 0x80, 0xc3, 0x7a, 0xf6, 0x7a, 0x80, 0x8c, 0x3c, 0x60, 0x5f, 0x1a, 0x1c, 0x45, 0x47, 0xf6, 0x4a, 0x33, 0xb6, 0xd2, 0xfd, 0x5c, 0xf1, 0x76, 0x51, 0xc3, 0xa8, 0xa, 0x19}

	assert.Equal(digest, exceptDigest)
	block.Header.MixDigest = HeaderDigest(header)
	assert.Equal(digest, exceptDigest)
}

func TestHeaderHash(t *testing.T) {
	assert := assert.New(t)
	block := MockBlock()

	var tmp types.Hash
	assert.True(bytes.Equal(tmp[:], block.HeaderHash[:]))
	headerHash := HeaderHash(block)
	exceptHeaderHash := types.Hash{0xd8, 0xf9, 0xbb, 0xf4, 0x80, 0xc3, 0x7a, 0xf6, 0x7a, 0x80, 0x8c, 0x3c, 0x60, 0x5f, 0x1a, 0x1c, 0x45, 0x47, 0xf6, 0x4a, 0x33, 0xb6, 0xd2, 0xfd, 0x5c, 0xf1, 0x76, 0x51, 0xc3, 0xa8, 0xa, 0x19}

	assert.Equal(exceptHeaderHash, headerHash)

	block.HeaderHash = HeaderHash(block)
	headerHash = HeaderHash(block)
	assert.Equal(exceptHeaderHash, headerHash)
}
